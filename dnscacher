// ==UserScript==
// @name        DNS Record Cacher
// @namespace   http://tampermonkey.net/
// @version     0.3
// @description Caches DNS records using system DNS servers, prioritizing AAAA with fallback to A, with optimistic use and background refresh, TTL 3 days.
// @author      Grok
// @match       *://*/*
// @grant       GM_setValue
// @grant       GM_getValue
// ==/UserScript==

(function() {
    'use strict';

    const TTL = 3 * 24 * 60 * 60 * 1000; // 3 days in ms
    const DOMAIN_REGEX = /^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9](?:\.[a-zA-Z]{2,})+$/;

    function getCacheKey(domain, type) {
        return `dns_cache_${domain.toLowerCase()}_${type.toUpperCase()}`;
    }

    function getCached(domain, type) {
        const key = getCacheKey(domain, type);
        const cached = GM_getValue(key, null);
        if (cached && (Date.now() - cached.timestamp) < TTL) {
            return cached.result;
        }
        return null;
    }

    function setCached(domain, type, result) {
        const key = getCacheKey(domain, type);
        GM_setValue(key, { result: result, timestamp: Date.now() });
    }

    async function fetchDNS(domain, type) {
        if (typeof window.dnsResolve !== 'function') {
            console.warn('System DNS resolver not available. Check your browser support.');
            return [];
        }
        try {
            const result = await window.dnsResolve(domain, type);
            return result || [];
        } catch (e) {
            console.error(`System DNS resolution for ${type} failed:`, e);
            return [];
        }
    }

    window.cacheDNS = async function(domain, type = 'AAAA') {
        if (!domain || !DOMAIN_REGEX.test(domain)) {
            throw new Error('Valid domain required, mate. No dodgy inputs.');
        }

        // Try AAAA first (or specified type)
        let result = getCached(domain, type);
        if (result && (type !== 'A' || result.length > 0)) {
            // Optimistic return, background refresh
            setTimeout(async () => {
                try {
                    const fresh = await fetchDNS(domain, type);
                    setCached(domain, type, fresh);
                } catch (e) {
                    console.error('Background DNS refresh failed:', e);
                }
            }, 0);
            return result;
        }

        // Fetch fresh AAAA records
        result = await fetchDNS(domain, type);
        setCached(domain, type, result);

        // If AAAA is empty and type is AAAA, fallback to A
        if (type === 'AAAA' && result.length === 0) {
            const cachedA = getCached(domain, 'A');
            if (cachedA) {
                // Optimistic return for A, background refresh
                setTimeout(async () => {
                    try {
                        const freshA = await fetchDNS(domain, 'A');
                        setCached(domain, 'A', freshA);
                    } catch (e) {
                        console.error('Background DNS refresh for A failed:', e);
                    }
                }, 0);
                return cachedA;
            }
            // Fetch fresh A records
            const resultA = await fetchDNS(domain, 'A');
            setCached(domain, 'A', resultA);
            return resultA;
        }

        return result;
    };
})();
